;; ;; (require 'evil-escape)
;; ;; (setq-default evil-escape-key-sequence "jk")
;; ;; (setq-default evil-escape-delay 0.2)

;; (require 'evil-leader)
;; (global-evil-leader-mode)
;; (setq evil-leader/in-all-states 1)

;; (require 'evil-matchit)
;; (global-evil-matchit-mode)

;; (setq evil-toggle-key "")   ; remove default evil-toggle-key C-z, manually setup later
;; (setq evil-want-C-i-jump nil)   ; don't bind [tab] to evil-jump-forward

;; (require 'evil) 
;; (evil-mode 1) 

;; ;; remove all keybindings from insert-state keymap, use emacs-state when editing
;; (setcdr evil-insert-state-map nil)
 
;; ;; ESC to switch back normal-state
;; (define-key evil-insert-state-map [escape] 'evil-normal-state)
 
;; ;; TAB to indent in normal-state
;; (define-key evil-normal-state-map (kbd "TAB") 'indent-for-tab-command)
 
;; ;; Use j/k to move one visual line insted of gj/gk
;; (define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
;; (define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
;; (define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
;; (define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)

;; ;; (add-to-list 'evil-emacs-state-modes 'markdown-mode)
;; ;;(add-to-list 'evil-emacs-state-modes 'magit-mode)
;; ;;(add-to-list 'evil-emacs-state-modes 'org-mode)
;; ;; (add-to-list 'evil-emacs-state-modes 'el-get-package-menu-mode)

;; ;;(setq evil-default-state 'emacs)
;; (define-key evil-emacs-state-map (kbd "C-o") 'evil-execute-in-normal-state)
;; ;;(define-key evil-normal-state-map "M-x" 'execute-extended-command)

;; ;;(define-key evil-motion-state-map ";" 'smex)
;; (define-key evil-motion-state-map ":" 'evil-ex)
;; (define-key evil-ex-map "e" 'ido-find-file)
;; ;;(define-key evil-ex-map "q" 'ido-kill-buffer)
;; (global-set-key (kbd "C-s") 'evil-write)



;; ;;magit
;; (define-key magit-mode-map (kbd "k") #'previous-line)
;; (define-key magit-mode-map (kbd "K") #'magit-discard)
;; (define-key magit-mode-map (kbd "j") #'next-line)

;; ;; (evil-set-initial-state 'magit-mode 'normal)
;; ;; (evil-set-initial-state 'magit-status-mode 'normal)
;; ;; (evil-set-initial-state 'magit-diff-mode 'normal)
;; ;; (evil-set-initial-state 'magit-log-mode 'normal)
;; ;;   (evil-set-initial-state 'magit-commit-mode 'normal)

;; ;; (evil-define-key 'normal magit-mode-map
;; ;; (kbd "j" ) 'magit-goto-next-section
;; ;; (kbd "k" ) 'magit-goto-previous-section)
;; ;; (evil-define-key 'normal magit-log-mode-map
;; ;; (kbd "j" ) 'magit-goto-next-section
;; ;; (kbd "k" ) 'magit-goto-previous-section)
;; ;; (evil-define-key 'normal magit-diff-mode-map
;; ;; (kbd "j"  )'magit-goto-next-section
;; ;; (kbd "k"  )'magit-goto-previous-section)
;; ;; (evil-define-key 'normal magit-commit-mode-map
;; ;; (kbd "j" ) 'magit-goto-next-section
;; ;; (kbd "k" ) 'magit-goto-previous-section)

;; (evil-set-initial-state 'ibuffer-mode 'normal)
;; (setq evil-insert-state-cursor 'box)

;; ;; esc quits
;; (defun minibuffer-keyboard-quit ()
;;   (interactive)
;;   (if (and delete-selection-mode transient-mark-mode mark-active)
;;       (setq deactivate-mark  t)
;;     (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
;;     (abort-recursive-edit)))
;; (define-key evil-normal-state-map [escape] 'keyboard-quit)
;; (define-key evil-visual-state-map [escape] 'keyboard-quit)
;; (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
;; (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
;; (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
;; (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
;; (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
;; (global-set-key [escape] 'evil-exit-emacs-state)

;; (setq-default
;;  evil-normal-state-tag (propertize "N" 'face '((:background "green" :foreground "black")))
;;  evil-emacs-state-tag (propertize "E" 'face '((:background "orange" :foreground "black")))
;;  evil-insert-state-tag (propertize "I" 'face '((:background "red")))
;;  evil-motion-state-tag (propertize "M" 'face '((:background "blue")))
;;  evil-visual-state-tag (propertize "V" 'face '((:background "grey80" :foreground "cyan")))
;;  evil-operator-state-tag (propertize "O" 'face '((:background "purple"))))

;; (setq evil-emacs-state-cursor '("blue" box))
;; (setq evil-normal-state-cursor '("red" box))
;; (setq evil-visual-state-cursor '("orange" box))
;; (setq evil-insert-state-cursor '("red" bar))
;; (setq evil-replace-state-cursor '("red" bar))
;; (setq evil-operator-state-cursor '("red" hollow))

;; (define-key evil-normal-state-map (kbd "C-h") 'evil-window-left)
;; (define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
;; (define-key evil-normal-state-map (kbd "C-k") 'evil-window-up)
;; (define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)

;; ;;Org-Mode In Evil-Mode
;; (evil-define-key 'normal org-mode-map (kbd "<tab>") #'org-cycle)
;; ;; (define-key org-agenda-mode-map "j" 'evil-next-line)
;; ;; (define-key org-agenda-mode-map "k" 'evil-previous-line)

;; ;;在buffer list中使j/k键绑定为下/上移一行
;; (evil-define-key 'normal tabulated-list-mode-map
;;     (kbd "j") 'next-line
;;     (kbd "k") 'previous-line) 
;; ;;在agenda view中使j/k键绑定为下/上移一行（与默认的n/p交换）
;; (require 'org-agenda)
;; (define-key org-agenda-mode-map "j" 'org-agenda-next-line)
;; (define-key org-agenda-mode-map "k" 'org-agenda-previous-line)
;; (define-key org-agenda-mode-map "n" 'org-agenda-goto-date)
;; (define-key org-agenda-mode-map "p" 'org-agenda-capture)

;; (define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
;; (define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)

;; ;; ;;evil-leader
;; ;;(evil-leader/set-leader ", ,")
;; (evil-leader/set-leader ",")
;; (setq evil-leader/in-all-states 1)

;; (evil-leader/set-key "w" 'evil-ace-jump-word-mode) ; ,e for Ace Jump (word)
;; (evil-leader/set-key "l" 'evil-ace-jump-line-mode) ; ,l for Ace Jump (line)
;; (evil-leader/set-key "e" 'evil-ace-jump-char-mode) ; ,x for Ace Jump (char)

;; (evil-leader/set-key "h" 'dired-jump)
;; (evil-leader/set-key "v" 'split-window-right)
;; (evil-leader/set-key "," 'other-window)
;; (evil-leader/set-key "b" 'ibuffer)
;; (evil-leader/set-key "x" 'smex)

;; (evil-leader/set-key "n" 'neotree-toggle)
;; (evil-leader/set-key "c" 'qiang-comment-dwim-line)
;; (setq-default tab-width 4 indent-tabs-mode nil)
;; (define-key global-map (kbd "RET") 'newline-and-indent)
;; (setq evil-move-cursor-back nil)

;; (require 'evil-surround)
;; (global-evil-surround-mode 1)

;; (require 'key-chord)
;; (key-chord-define evil-insert-state-map  "jk" 'evil-normal-state)
;; (key-chord-define evil-normal-state-map "jk" 'evil-force-normal-state)
;; (key-chord-define evil-visual-state-map "jk" 'evil-change-to-previous-state)
;; (key-chord-define evil-replace-state-map "jk" 'evil-normal-state)
;; (setq key-chord-two-keys-delay 0.4)
;; (key-chord-mode 1)

;; (setq evil-search-module 'evil-search)

;; ;;expand-region
;; (require 'expand-region)
;; (global-set-key (kbd "C-=") 'er/expand-region)
;; ;;(global-set-key (kbd "C-c =") 'er/expand-region)

;; ;; "after" macro definition
;; (if (fboundp 'with-eval-after-load)
;;     (defmacro after (feature &rest body)
;;       "After FEATURE is loaded, evaluate BODY."
;;       (declare (indent defun))
;;       `(with-eval-after-load ,feature ,@body))
;;   (defmacro after (feature &rest body)
;;     "After FEATURE is loaded, evaluate BODY."
;;     (declare (indent defun))
;;     `(eval-after-load ,feature
;;        '(progn ,@body))))

;; ;;Replace
;; (defun evil-replace-word-selection()
;;   (interactive)
;;   (if (use-region-p)
;;       (let (
;;             (selection (buffer-substring-no-properties (region-beginning) (region-end))))
;;         (if (= (length selection) 0)
;;             (message "empty string")
;;           (evil-ex (concat "'<,'>s/" selection "/"))
;;           ))
;;     (evil-ex (concat "%s/" (thing-at-point 'word) "/"))))
