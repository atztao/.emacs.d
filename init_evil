;evil-mode
;-------------------------------------------------------------------------------------------------------------------------

;; (require 'evil-leader)
;; (global-evil-leader-mode)

;; (setq evil-toggle-key "")   ; remove default evil-toggle-key C-z, manually setup later
;; (setq evil-want-C-i-jump nil)   ; don't bind [tab] to evil-jump-forward

;; (add-to-list 'load-path "~/.emacs.d/elpa/evil-20170208.1204/")
;; (require 'evil) 
;; (evil-mode 1) 

;; ;; remove all keybindings from insert-state keymap, use emacs-state when editing
;; (setcdr evil-insert-state-map nil)
 
;; ;; ESC to switch back normal-state
;; (define-key evil-insert-state-map [escape] 'evil-normal-state)
 
;; ;; TAB to indent in normal-state
;; (define-key evil-normal-state-map (kbd "TAB") 'indent-for-tab-command)
 
;; ;; Use j/k to move one visual line insted of gj/gk
;; (define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
;; (define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
;; (define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
;; (define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)

;; ;; (add-to-list 'evil-emacs-state-modes 'markdown-mode)
;; (add-to-list 'evil-emacs-state-modes 'magit-mode)
;; ;;(add-to-list 'evil-emacs-state-modes 'org-mode)
;; (add-to-list 'evil-emacs-state-modes 'el-get-package-menu-mode)

;; ;;(setq evil-default-state 'emacs)
;; (define-key evil-emacs-state-map (kbd "C-o") 'evil-execute-in-normal-state)
;; ;;(define-key evil-normal-state-map "M-x" 'execute-extended-command)

;; ;;(define-key evil-motion-state-map ";" 'smex)
;; (define-key evil-motion-state-map ":" 'evil-ex)
;; (define-key evil-ex-map "e" 'ido-find-file)
;; ;;(define-key evil-ex-map "q" 'ido-kill-buffer)
;; (global-set-key (kbd "C-s") 'evil-write)

;; ;;magit
;; ;;(evil-set-initial-state 'magit-mode 'normal)
;; ;;(evil-set-initial-state 'magit-status-mode 'normal)
;; ;;(evil-set-initial-state 'magit-diff-mode 'normal)
;; ;;(evil-set-initial-state 'magit-log-mode 'normal)
;; ;;(evil-define-key 'normal magit-mode-map
;; ;;  "j" 'magit-goto-next-section
;; ;;  "k" 'magit-goto-previous-section)
;; ;;(evil-define-key 'normal magit-log-mode-map
;; ;;  "j" 'magit-goto-next-section
;; ;;  "k" 'magit-goto-previous-section)
;; ;;(evil-define-key 'normal magit-diff-mode-map
;; ;;  "j" 'magit-goto-next-section
;; ;;  "k" 'magit-goto-previous-section)


;; (evil-set-initial-state 'ibuffer-mode 'normal)
;; (setq evil-insert-state-cursor 'box)

;; ;; esc quits
;; (defun minibuffer-keyboard-quit ()
;;   (interactive)
;;   (if (and delete-selection-mode transient-mark-mode mark-active)
;;       (setq deactivate-mark  t)
;;     (when (get-buffer "*Completions*") (delete-windows-on "*Completions*"))
;;     (abort-recursive-edit)))
;; (define-key evil-normal-state-map [escape] 'keyboard-quit)
;; (define-key evil-visual-state-map [escape] 'keyboard-quit)
;; (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
;; (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
;; (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
;; (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
;; (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
;; (global-set-key [escape] 'evil-exit-emacs-state)

;; ;; change mode-line color by evil state
;; ;; (lexical-let ((default-color (cons (face-background 'mode-line)
;; ;;                                    (face-foreground 'mode-line))))
;; ;;   (add-hook 'post-command-hook
;; ;;     (lambda ()
;; ;;       (let ((color (cond ((minibufferp) default-color)
;; ;;                          ((evil-insert-state-p) '("#e80000" . "#ffffff"))
;; ;;                          ((evil-emacs-state-p)  '("#af00d7" . "#ffffff"))
;; ;;                          ((buffer-modified-p)   '("#006fa0" . "#ffffff"))
;; ;;                          (t default-color))))
;; ;;         (set-face-background 'mode-line (car color))
;; ;;         (set-face-foreground 'mode-line (cdr color))))))

;; ;; (setq evil-emacs-state-cursor '("red" box))
;; ;; (setq evil-normal-state-cursor '("green" box))
;; ;; (setq evil-visual-state-cursor '("orange" box))
;; ;; (setq evil-insert-state-cursor '("red" bar))
;; ;; (setq evil-replace-state-cursor '("red" bar))
;; ;; (setq evil-operator-state-cursor '("red" hollow))

;; (define-key evil-normal-state-map (kbd "C-h") 'evil-window-left)
;; (define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
;; (define-key evil-normal-state-map (kbd "C-k") 'evil-window-up)
;; (define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)

;; (define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
;; (define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)

;; ;; ;;evil-leader
;; ;;(evil-leader/set-leader ";")
;; (evil-leader/set-leader ",")
;; ;;(evil-leader/set-leader "<SPC>")
;; (setq evil-leader/in-all-states 1)

;; (evil-leader/set-key "e" 'evil-ace-jump-word-mode) ; ,e for Ace Jump (word)
;; (evil-leader/set-key "l" 'evil-ace-jump-line-mode) ; ,l for Ace Jump (line)
;; (evil-leader/set-key "x" 'evil-ace-jump-char-mode) ; ,x for Ace Jump (char)

;; (evil-leader/set-key "h" 'dired-jump)
;; (evil-leader/set-key "v" 'split-window-right)
;; (evil-leader/set-key "," 'other-window)
;; (evil-leader/set-key "b" 'ibuffer)
;; (evil-leader/set-key "x" 'helm-M-x)

;; (setq-default tab-width 4 indent-tabs-mode nil)
;; (define-key global-map (kbd "RET") 'newline-and-indent)
;; (setq evil-move-cursor-back nil)

;; (require 'evil-surround)
;; (global-evil-surround-mode 1)

;; (require 'key-chord)
;; ;;(key-chord-define evil-insert-state-map  "jk" 'evil-normal-state)
;; (setq key-chord-two-keys-delay 0.5)
;; (key-chord-define evil-insert-state-map "jk" 'evil-normal-state)
;; (key-chord-mode 1)

;; ;;-------------------------------------------------------------------------------------------------------------------------
